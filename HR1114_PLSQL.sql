--PL SQL
--EMPLOYEES에 해당된 이름, 직업, 사원번호를 출력해주는 프로그램을 작성하시오.
DECLARE
 --배열타입정의(테이블타입정의)
   TYPE FIRST_NAME_ARRAY_TYPE IS TABLE OF EMPLOYEES.FIRST_NAME%TYPE INDEX BY BINARY_INTEGER;
   TYPE JOB_ID_ARRAY_TYPE IS TABLE OF EMPLOYEES.JOB_ID%TYPE INDEX BY BINARY_INTEGER;
   TYPE EMPLOYEE_ID_ARRAY_TYPE IS TABLE OF EMPLOYEES.EMPLOYEE_ID%TYPE INDEX BY BINARY_INTEGER;
 --배열타입 변수 선언
    FIRST_NAME_ARRAY FIRST_NAME_ARRAY_TYPE;
    JOB_ID_ARRAY JOB_ID_ARRAY_TYPE;
    EMPLOYEE_ID_ARRAY EMPLOYEE_ID_ARRAY_TYPE;
    ROW_ARRAY EMPLOYEES%ROWTYPE;
    I BINARY_INTEGER := 0;
BEGIN
 --향상된 포문을 통해서 RESULT SET값을 한개씩 가져와서 각 칼럼배열에 저장한다.
    FOR ROW_ARRAY IN (SELECT * FROM EMPLOYEES)LOOP
    I := I + 1;
    FIRST_NAME_ARRAY(I) := ROW_ARRAY.FIRST_NAME;
    JOB_ID_ARRAY(I) := ROW_ARRAY.JOB_ID;
    EMPLOYEE_ID_ARRAY(I) := ROW_ARRAY.EMPLOYEE_ID;

    END LOOP;
--향상된 포문을 이용해서 컬럼 배열값에 저장된 값을 가져와서 출력
    FOR J IN 1..I LOOP
    DBMS_OUTPUT.PUT_LINE(FIRST_NAME_ARRAY(J)||'  /  '||JOB_ID_ARRAY(J)||'  /  '||EMPLOYEE_ID_ARRAY(J));
    END LOOP;
END;
/

--EMPLOYEES에서 'Susan'이름을 갖는 사원의 사원번호, 사원명, 부서번호를 출력
DECLARE
    VEMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE;
    VFIRST_NAME EMPLOYEES.FIRST_NAME%TYPE;
    VLAST_NAME EMPLOYEES.LAST_NAME%TYPE;
    VDEPARTMENT_ID EMPLOYEES.DEPARTMENT_ID%TYPE;

BEGIN
    SELECT EMPLOYEE_ID,FIRST_NAME,LAST_NAME,DEPARTMENT_ID 
    INTO VEMPLOYEE_ID,VFIRST_NAME,VLAST_NAME,VDEPARTMENT_ID
    FROM EMPLOYEES WHERE FIRST_NAME = 'Susan';
    
    DBMS_OUTPUT.PUT_LINE(VEMPLOYEE_ID||','||VFIRST_NAME||','||VLAST_NAME||','||VDEPARTMENT_ID);
END;
/
SELECT EMPLOYEE_ID,FIRST_NAME,LAST_NAME,DEPARTMENT_ID FROM EMPLOYEES WHERE FIRST_NAME = 'Susan';

--EMPLOYEES에서 최고경영자의 이름, 사원번호, 담당업무, 부서번호 출력 (레코드변수 이용) 
DECLARE
    --레코드타입 정리(사업번호, 이름, 담당업무, 부서번호)
    TYPE EMP_RECORD_TYPE IS RECORD(
        VEMPLOYEE_ID EMPLOYEES.EMPLOYEE_ID%TYPE,
        VFIRST_NAME EMPLOYEES.FIRST_NAME%TYPE,
        VLAST_NAME EMPLOYEES.LAST_NAME%TYPE,
        VDEPARTMENT_ID EMPLOYEES.DEPARTMENT_ID%TYPE    
    );
    --레코드 타입 변수 선언
    EMP_RECORD EMP_RECORD_TYPE;
    
BEGIN
    SELECT EMPLOYEE_ID,FIRST_NAME,LAST_NAME,DEPARTMENT_ID INTO EMP_RECORD
    FROM EMPLOYEES WHERE MANAGER_ID IS NULL;
    DBMS_OUTPUT.PUT_LINE('사원번호:'||EMP_RECORD.VEMPLOYEE_ID);
    DBMS_OUTPUT.PUT_LINE('이름:'||EMP_RECORD.VFIRST_NAME||'  '||EMP_RECORD.VLAST_NAME);
    DBMS_OUTPUT.PUT_LINE('사원번호:'||EMP_RECORD.VDEPARTMENT_ID);

END;
/

SELECT EMPLOYEE_ID,FIRST_NAME,SALARY*12+(NVL(COMMISSION_PCT,0)*SALARY) AS "연봉" FROM EMPLOYEES WHERE MANAGER_ID IS NULL;

--EMPLOYEES에서 최고경영자의 이름, 사원번호, 담당업무, 부서번호 출력 (ROWTPYE 이용) 
DECLARE
   
    --레코드 타입 변수 선언, 연봉타입선언
    EMP_RECORD EMPLOYEES%ROWTYPE;
    TOTAL_SALARY EMPLOYEES.SALARY%TYPE;
BEGIN
    SELECT * INTO EMP_RECORD
    FROM EMPLOYEES WHERE MANAGER_ID IS NULL;
    
    IF (EMP_RECORD.COMMISSION_PCT IS NULL)THEN
        EMP_RECORD.COMMISSION_PCT := 0;
    END IF;
    
    TOTAL_SALARY := EMP_RECORD.SALARY * 12 +(EMP_RECORD.COMMISSION_PCT);
    
    DBMS_OUTPUT.PUT_LINE('사원번호:'||EMP_RECORD.EMPLOYEE_ID);
    DBMS_OUTPUT.PUT_LINE('이름:'||EMP_RECORD.FIRST_NAME||'  '||EMP_RECORD.LAST_NAME);
    DBMS_OUTPUT.PUT_LINE('전체연봉:'||LTRIM(TO_CHAR(TOTAL_SALARY,'$999,999,999.99')));

END;
/
--내용을 EMPLOYEES  최고경영자의 이름, 사원번호, 담당업무, 부서번호 출력 (ROWTPYE 이용) 

BEGIN
    SELECT * INTO EMP_RECORD
    FROM EMPLOYEES WHERE MANAGER_ID IS NULL;
    
    IF (EMP_RECORD.COMMISSION_PCT IS NULL)THEN
        EMP_RECORD.COMMISSION_PCT := 0;
        
        
    END IF;
    
    TOTAL_SALARY := EMP_RECORD.SALARY * 12 +(EMP_RECORD.COMMISSION_PCT);
    
    DBMS_OUTPUT.PUT_LINE('사원번호:'||EMP_RECORD.EMPLOYEE_ID);
    DBMS_OUTPUT.PUT_LINE('이름:'||EMP_RECORD.FIRST_NAME||'  '||EMP_RECORD.LAST_NAME);
    DBMS_OUTPUT.PUT_LINE('전체연봉:'||LTRIM(TO_CHAR(TOTAL_SALARY,'$999,999,999.99')));

END;
/

SELECT ROUND(DBMS_RANDOM.VALUE(1,5),0)FROM DUAL;
SELECT DBMS_RANDOM.STRING('A',10)FROM DUAL;
SELECT ROUND(DBMS_RANDOM.VALUE(10,110),-1)FROM DUAL;

(SELECT SALARY, DEPARTMENT_ID,FIRST_NAME FROM EMPLOYEES WHERE DEPARTMENT_ID = 50 ORDER BY SALARY DESC);
SELECT ROWNUM, SALARY, DEPARTMENT_ID,FIRST_NAME 
FROM (SELECT SALARY, DEPARTMENT_ID,FIRST_NAME FROM EMPLOYEES WHERE DEPARTMENT_ID = 50 ORDER BY SALARY DESC) WHERE ROWNUM =1;
--EMPLOYEE 테이블에서 임의의 부서번호를 랜덤으로 생성한뒤, 해당된 부서번호 최고연봉을 출력한뒤, 평가하여라(낮음, 높음, 중간, 최고,없음)
DECLARE
    VNO NUMBER(4);
    VTOP_SALARY NUMBER(12,2);
    VRESULT VARCHAR2(20);
BEGIN
--임의의 부서번호 생성 (RANDOM)
    VNO := ROUND(DBMS_RANDOM.VALUE(10,110),-1);
    SELECT SALARY INTO VTOP_SALARY
    FROM (SELECT SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = VNO ORDER BY SALARY DESC)
    WHERE ROWNUM =1;
    --평가내리기 1~5000 - 낮음, 5000~10000 - 중간, 10000 ~ 20000 - 높음, 20000 - 최고, 없으면 예외처리
    IF (VTOP_SALARY BETWEEN 1 AND 5000) THEN
        VRESULT :='낮음';
    ELSIF (VTOP_SALARY BETWEEN 5000 AND 10000) THEN
        VRESULT :='중간';
    ELSIF (VTOP_SALARY BETWEEN 10000 AND 20000) THEN
        VRESULT :='높음';
    ELSE
        VRESULT :='최고';
        END IF;
        DBMS_OUTPUT.PUT_LINE('부서번호:'||VNO);
        DBMS_OUTPUT.PUT_LINE('최고연봉:'||VTOP_SALARY);
        DBMS_OUTPUT.PUT_LINE('최고연봉평가:'||VRESULT);
    
EXCEPTION
     WHEN NO_DATA_FOUND THEN
     DBMS_OUTPUT.PUT_LINE(VNO||'해당부서에 해당되는 사원이 없습니다.');
END;
/
--구구단 만들기 FOR IN 문
DECLARE
    I BINARY_INTEGER :=0;
    J BINARY_INTEGER :=0;
BEGIN
    FOR I IN 1..9 LOOP
        DBMS_OUTPUT.PUT_LINE('========='||I||'DAN'||'==============');
        FOR J IN 1..9 LOOP
        
        DBMS_OUTPUT.PUT_LINE(I||'*'||J||'='||I*J);
        END LOOP;
    END LOOP;
END;
/
--루프문
DECLARE
    VNUM NUMBER:=0;
    VCOUNT NUMBER:=0;
    VDAN NUMBER:=0;
BEGIN
    LOOP
        VDAN := VDAN+1;
        VCOUNT :=1;
        DBMS_OUTPUT.PUT_LINE('========='||VDAN||'==============');
        LOOP
            DBMS_OUTPUT.PUT_LINE(VDAN||'*'||VCOUNT||'='||VDAN*VCOUNT);
            VCOUNT := VCOUNT + 1;
            IF VCOUNT > 9 THEN
            EXIT;
            END IF;
        END LOOP;
     IF VDAN > 9 THEN
     
        EXIT;
    END IF;
    END LOOP;
END;
/

--문제 1번
DECLARE
    TOTAL_EMPLOYEE NUMBER(4);
    TOTAL_SALARY NUMBER(10);
    AVG_SALARY NUMBER(10);
BEGIN
   SELECT COUNT(EMPLOYEE_ID),SUM(SALARY),ROUND(AVG(SALARY))
   INTO TOTAL_EMPLOYEE,TOTAL_SALARY,AVG_SALARY
   FROM EMPLOYEES;
   
   DBMS_OUTPUT.PUT_LINE('총사원의 수: '||TOTAL_EMPLOYEE);
   DBMS_OUTPUT.PUT_LINE('급여의 합: '||TOTAL_SALARY);
   DBMS_OUTPUT.PUT_LINE('급여의 평균: '||AVG_SALARY);   
END;
/

--문제 2번
DECLARE
    VJOB_ID EMPLOYEES.JOB_ID%TYPE;
    VSALARY EMPLOYEES.SALARY%TYPE;
    VHIRE_DATE EMPLOYEES.HIRE_DATE%TYPE;
    VCOMMISSION_PCT EMPLOYEES.COMMISSION_PCT%TYPE;
    VDEPARTMENT_NAME  DEPARTMENTS.DEPARTMENT_NAME%TYPE;
BEGIN
   SELECT JOB_ID,SALARY,HIRE_DATE,COMMISSION_PCT,DEPARTMENT_NAME INTO VJOB_ID,VSALARY,VHIRE_DATE,VCOMMISSION_PCT,VDEPARTMENT_NAME
   FROM EMPLOYEES E 
   INNER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
   WHERE FIRST_NAME = 'Clara';
   DBMS_OUTPUT.PUT_LINE('직무: '||VJOB_ID);
   DBMS_OUTPUT.PUT_LINE('급여: '||VSALARY);
   DBMS_OUTPUT.PUT_LINE('입사날짜: '||VHIRE_DATE);   
   DBMS_OUTPUT.PUT_LINE('커미션: '||VCOMMISSION_PCT);   
   DBMS_OUTPUT.PUT_LINE('부서명: '||VDEPARTMENT_NAME);
END;
/
--DEPARTMENTS에서 반복문을 이용해서 10,20,30,40정보를 출력
DECLARE
    VDEPARTMENTS DEPARTMENTS%ROWTYPE;
BEGIN
    FOR I IN  REVERSE 1..9 LOOP
    SELECT * INTO VDEPARTMENTS FROM DEPARTMENTS WHERE DEPARTMENT_ID = I*10;
    DBMS_OUTPUT.PUT_LINE(VDEPARTMENTS.DEPARTMENT_ID||' / '||VDEPARTMENTS.DEPARTMENT_NAME);
    END LOOP;
END;
/
SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID =10;
SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID =20;
SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID =30;
SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID =40;


